---
format: gfm
editor: visual
---

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(knitr)
```

<br>

## Exercise 1. Tibble and Data Import

Import the data frames listed below into R and [parse](https://r4ds.had.co.nz/data-import.html#parsing-a-vector) the columns appropriately when needed. Watch out for the formatting oddities of each dataset. Print the results directly, **without** using `kable()`.

**You only need to finish any three out of the five questions in this exercise in order to get credit.**

<br>

#### 1.1 Create the following tibble manually, first using `tribble()` and then using `tibble()`. Print both results. \[We didn’t have time to cover this in class, but look up how these functions work [here](https://r4ds.had.co.nz/tibbles.html#creating-tibbles)\]

`tribble()`:

```{r}
#| echo: true
#| message: false
#| warning: false
tribble(
  ~a, ~b, ~c,
  1, 2.1, "apple",
  2, 3.2, "orange"
)
```
`tibble()`:

```{r}
#| echo: true
#| message: false
#| warning: false
tibble(
  a = c(1, 2),
  b = c(2.1, 3.2),
  c = c("apple", "orange")
)
```


<br>

#### 1.2 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt` into R. Change the column names into “Name”, “Weight”, “Price”.

```{r}
#| echo: true
#| message: false
#| warning: false
q1.2 <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt", delim = ",", col_names = c("Name", "Weight", "Price"))

print(q1.2)
```

<br>

#### 1.3 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt` into R. Watch out for the first few lines, missing values, separators, quotation marks, and deliminaters.

```{r}
#| echo: true
#| message: false
#| warning: false
q1.3 <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt", skip = 3, delim = ";", col_names = c("Name", "Weight", "Price")) |> 
  mutate(across(everything(), ~str_remove_all(., "/"))) |> 
  mutate(Weight = as.numeric(Weight), Price = as.numeric(Price))

q1.3
```


## Exercise 2. Weather station

This dataset contains the weather and air quality data collected by a
weather station in Taiwan. It was obtained from the Environmental
Protection Administration, Executive Yuan, R.O.C. (Taiwan).

#### 2.1 Variable descriptions

- The text file
  `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt`
  contains descriptions of different variables collected by the station.

- Import it into R and print it in a table as shown below with
  `kable()`.

<br>

```{r}
#| echo: true
#| message: false
#| warning: false
q2.1 <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt", delim = "-")

kable(q2.1)
```
`#` indicates invalid value by equipment inspection  
`*` indicates invalid value by program inspection  
`x` indicates invalid value by human inspection  
`NR` indicates no rainfall  
blank indicates no data

<br>

#### 2.2 Data tidying

- Import
  `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv`
  into R. As you can see, this dataset is a classic example of untidy
  data: values of a variable (i.e. hour of the day) are stored as column
  names; variable names are stored in the `item` column.

- Clean this dataset up and restructure it into a tidy format.

- Parse the `date` variable into date format and parse `hour` into time.

- Turn all invalid values into `NA` and turn `NR` in rainfall into `0`.

- Parse all values into numbers.

- Show the first 6 rows and 10 columns of this cleaned dataset, as shown
  below, *without* using `kable()`.

*Hints: you don’t have to perform these tasks in the given order; also,
warning messages are not necessarily signs of trouble.*

<br>

Before cleaning:

```{r}
#| echo: true
#| message: false
#| warning: false
q2.2unclean <- read_csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv")
q2.2unclean
```


<br>

After cleaning:

```{r}
#| echo: true
#| message: false
#| warning: false
q2.2clean <- q2.2unclean |> 
  mutate(across(-c(date, station, item), as.character)) |> 
  pivot_longer(
    cols = -c(date, station, item),
    names_to = "hour",
    values_to = "value"
  ) |> 
  mutate(value = if_else(value == "NR", "0", value)) |> 
  mutate(value = as.numeric(value)) |> 
  pivot_wider(
    names_from = item,
    values_from = value
  ) |> 
  mutate(hour = hms::parse_hms(paste0(hour, ":00:00")),
         date = ymd(date))

q2.2clean
```

<br>

#### 2.3 Using this cleaned dataset, plot the daily variation in ambient temperature on September 25, 2015, as shown below.

```{r}
#| echo: true
#| message: false
#| warning: false
q2.3 <- q2.2clean |> 
  filter(date == "2015-09-25") |> 
  ggplot() +
  geom_line(mapping = aes(y = AMB_TEMP, x = hour))

q2.3
```

<br>

#### 2.4 Plot the daily average ambient temperature throughout the year with a **continuous line**, as shown below.

```{r}
#| echo: true
#| message: false
#| warning: false
q2.4 <- q2.2clean |> 
  group_by(date) |> 
  summarise(daily_average_ambient_temp = mean(AMB_TEMP, na.rm = T))|> 
  ggplot() +
  geom_line(mapping = aes(x = date, y = daily_average_ambient_temp))

q2.4
```

<br>

#### 2.5 Plot the total rainfall per month in a bar chart, as shown below.

*Hint: separating date into three columns might be helpful.*

```{r}
#| echo: true
#| message: false
#| warning: false
q2.5 <- q2.2clean |> 
  separate(date, into = c("year", "month", "day"), sep = "-") |> 
  group_by(month) |> 
  summarise(MonthlyRainfall = sum(RAINFALL, na.rm = T)) |> 
  ggplot() +
  geom_col(mapping = aes(x = month, y = MonthlyRainfall))

q2.5

```

<br>

#### 2.6 Plot the per hour variation in PM2.5 in the first week of September with a **continuous line**, as shown below.

*Hint: uniting the date and hour and parsing the new variable might be
helpful.*

```{r}
#| echo: true
#| message: false
#| warning: false
q2.6 <- q2.2clean |> 
  filter(date >= "2015-09-01" & date <= "2015-09-07") |> 
  filter(!is.na(PM2.5)) |> 
  unite(col = "time", date, hour, sep = " ") |> 
  mutate(time = as.POSIXct(time)) |> 
  ggplot() +
  geom_line(mapping = aes(x = time, y = PM2.5), na.rm = T)
q2.6
```


<br>